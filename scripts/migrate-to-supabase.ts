import { createClient } from '@supabase/supabase-js'
import { config } from 'dotenv'

// Carregar vari√°veis de ambiente
config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

const supabase = createClient(supabaseUrl, supabaseAnonKey)

// Dados dos usu√°rios fixos
const FIXED_USERS = [
  {
    id: 'admin',
    username: 'Administrador',
    password: 'admin',
    role: 'admin',
    permissions: ['view_all', 'edit_all']
  },
  {
    id: 'carrinho',
    username: 'Carrinho',
    password: 'carrinho',
    role: 'carrinho',
    permissions: ['view_carrinho', 'edit_carrinho', 'view_grupos', 'view_pregacao']
  },
  {
    id: 'nvc',
    username: 'Vida e Minist√©rio',
    password: 'nvc',
    role: 'nvc',
    permissions: ['view_nvc', 'edit_nvc', 'view_publicadores']
  },
  {
    id: 'pregacao',
    username: 'Prega√ß√£o',
    password: 'pregacao',
    role: 'pregacao',
    permissions: ['view_pregacao', 'edit_pregacao', 'view_grupos', 'edit_grupos', 'view_publicadores']
  },
  {
    id: 'mecanicas',
    username: 'Mec√¢nicas',
    password: 'mecanicas',
    role: 'mecanicas',
    permissions: ['view_mecanicas', 'edit_mecanicas', 'view_publicadores']
  },
  {
    id: 'oradores',
    username: 'Oradores',
    password: 'oradores',
    role: 'oradores',
    permissions: ['view_discursos', 'edit_discursos', 'view_publicadores']
  },
  {
    id: 'limpeza',
    username: 'Limpeza',
    password: 'limpeza',
    role: 'limpeza',
    permissions: ['view_limpeza', 'edit_limpeza', 'view_grupos', 'view_publicadores']
  }
]

async function migrateUsers() {
  console.log('üöÄ Iniciando migra√ß√£o de usu√°rios para o Supabase...')

  try {
    // 1. Criar tabelas (se n√£o existirem)
    console.log('üìã Criando tabelas...')
    
    // Inserir usu√°rios
    console.log('üë• Inserindo usu√°rios...')
    for (const user of FIXED_USERS) {
      const { data, error } = await supabase
        .from('users')
        .upsert({
          id: user.id,
          username: user.username,
          password: user.password,
          role: user.role
        })

      if (error) {
        console.error(`‚ùå Erro ao inserir usu√°rio ${user.username}:`, error)
      } else {
        console.log(`‚úÖ Usu√°rio ${user.username} inserido com sucesso`)
      }
    }

    // Inserir permiss√µes
    console.log('üîê Inserindo permiss√µes...')
    for (const user of FIXED_USERS) {
      // Primeiro, limpar permiss√µes existentes
      await supabase
        .from('user_permissions')
        .delete()
        .eq('user_id', user.id)

      // Inserir novas permiss√µes
      for (const permission of user.permissions) {
        const { error } = await supabase
          .from('user_permissions')
          .insert({
            user_id: user.id,
            permission: permission
          })

        if (error) {
          console.error(`‚ùå Erro ao inserir permiss√£o ${permission} para ${user.username}:`, error)
        }
      }
      console.log(`‚úÖ Permiss√µes para ${user.username} inseridas com sucesso`)
    }

    console.log('üéâ Migra√ß√£o conclu√≠da com sucesso!')

    // Verificar dados inseridos
    console.log('\nüìä Verificando dados inseridos...')
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('*')
      .order('username')

    if (usersError) {
      console.error('‚ùå Erro ao verificar usu√°rios:', usersError)
    } else {
      console.log(`‚úÖ ${users?.length || 0} usu√°rios encontrados no banco`)
    }

    const { data: permissions, error: permissionsError } = await supabase
      .from('user_permissions')
      .select('*')

    if (permissionsError) {
      console.error('‚ùå Erro ao verificar permiss√µes:', permissionsError)
    } else {
      console.log(`‚úÖ ${permissions?.length || 0} permiss√µes encontradas no banco`)
    }

  } catch (error) {
    console.error('üí• Erro durante a migra√ß√£o:', error)
  }
}

// Executar migra√ß√£o
migrateUsers()